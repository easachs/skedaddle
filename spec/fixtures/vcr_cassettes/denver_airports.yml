---
http_interactions:
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=AIzaSyCJ33zmfR8Sd3whmTBxHYBrrpx-XW7jC3w&location=39.740959,%20-104.985798&radius=50000&type=airport
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.7.11
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Tue, 21 Nov 2023 21:45:30 GMT
      Expires:
      - Tue, 21 Nov 2023 21:50:30 GMT
      Cache-Control:
      - public, max-age=300
      Vary:
      - Accept-Language
      Server:
      - scaffolding on HTTPServer2
      Content-Length:
      - '36881'
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      Server-Timing:
      - gfet4t7; dur=333
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 21 Nov 2023 21:45:30 GMT
recorded_with: VCR 6.2.0
